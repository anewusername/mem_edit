[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mem_edit"
description = "Multi-platform library for memory editing"
readme = "README.md"
license = { file = "LICENSE.md" }
authors = [
    { name="Jan Petykiewicz", email="jan@mpxd.net" },
    ]
homepage = "https://mpxd.net/code/jan/mem_edit"
repository = "https://mpxd.net/code/jan/mem_edit"
keywords = [
    "memory",
    "edit",
    "editing",
    "ReadProcessMemory",
    "WriteProcessMemory",
    "proc",
    "mem",
    "ptrace",
    "multiplatform",
    "scan",
    "scanner",
    "search",
    "debug",
    "cheat",
    "trainer",
    ]
classifiers = [
    "Programming Language :: Python :: 3",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Software Development",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Testing",
    "Topic :: System",
    "Topic :: Games/Entertainment",
    "Topic :: Utilities",
    ]
requires-python = ">=3.11"
dynamic = ["version"]
dependencies = [
    ]

[tool.hatch.version]
path = "mem_edit/__init__.py"


[tool.ruff]
exclude = [
    ".git",
    "dist",
    ]
line-length = 145
indent-width = 4
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
lint.select = [
    "NPY", "E", "F", "W", "B", "ANN", "UP", "SLOT", "SIM", "LOG",
    "C4", "ISC", "PIE", "PT", "RET", "TCH", "PTH", "INT",
    "ARG", "PL", "R", "TRY",
    "G010", "G101", "G201", "G202",
    "Q002", "Q003", "Q004",
    ]
lint.ignore = [
    #"ANN001",   # No annotation
    "ANN002",   # *args
    "ANN003",   # **kwargs
    "ANN401",   # Any
    "ANN101",   # self: Self
    "SIM108",   # single-line if / else assignment
    "RET504",   # x=y+z; return x
    "PIE790",   # unnecessary pass
    "ISC003",   # non-implicit string concatenation
    "C408",     # dict(x=y) instead of {'x': y}
    "PLR09",    # Too many xxx
    "PLR2004",  # magic number
    "PLC0414",  # import x as x
    "TRY003",   # Long exception message
    ]

